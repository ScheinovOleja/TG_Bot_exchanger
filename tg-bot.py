from config import *
from parser_el_change import GetCurrency
import telebot
from telebot import types

parser = GetCurrency()
markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
bot = telebot.TeleBot(token)
new_exchange = types.KeyboardButton("üîÅ –ù–æ–≤—ã–π –æ–±–º–µ–Ω")
exchange_history = types.KeyboardButton("‚åõ –ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤")
about_bot = types.KeyboardButton("‚ÑπÔ∏è–û –±–æ—Ç–µ")
support_key = types.KeyboardButton("üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
news = types.KeyboardButton("üì´ –ù–æ–≤–æ—Å—Ç–∏")
community = types.KeyboardButton("üë• –°–æ–æ–±—â–µ—Å—Ç–≤–æ")
support_button = types.InlineKeyboardButton("üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url='https://el-change.com/faq')
terms_of_use = types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", url='https://el-change.com/rules')
returns_policy = types.InlineKeyboardButton("–ü–æ–ª–∏—Ç–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤", url='https://el-change.com/rules')


@bot.message_handler(commands=['start'])
def welcome(message):
    markup.add(new_exchange, exchange_history, about_bot, support_key, news, community)
    bot.send_message(message.chat.id, 'üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º.', reply_markup=markup)
    bot.send_message(message.chat.id,
                     '–î–ª—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üîÅ –ù–æ–≤—ã–π –æ–±–º–µ–Ω, –æ–Ω–∞ –≤ –Ω–∏–∂–Ω–µ–º –º–µ–Ω—é üëá')


@bot.message_handler(content_types=['text'])
def message_one(message):
    markup_key = types.InlineKeyboardMarkup(row_width=2)
    if message.chat.type == 'private' and message.text == "‚ÑπÔ∏è–û –±–æ—Ç–µ":
        bot.send_message(message.chat.id,
                         '–ü—Ä–∏–≤–µ—Ç, —è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç!',
                         parse_mode='HTML')
        markup_key.add(support_button, terms_of_use, returns_policy)
        bot.send_message(message.chat.id, '–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—É—Ç üëá', reply_markup=markup_key)
    if message.chat.type == 'private' and message.text == "üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        markup_key.add(support_button, terms_of_use, returns_policy)
        bot.send_message(message.chat.id, '–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—É—Ç üëá', reply_markup=markup_key)
    if message.chat.type == 'private' and message.text == "‚åõ –ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤":
        bot.send_message(message.chat.id, '‚ùóÔ∏è –¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –æ–±–º–µ–Ω–æ–≤ –ø—É—Å—Ç.')
    if message.chat.type == 'private' and message.text == "üîÅ –ù–æ–≤—ã–π –æ–±–º–µ–Ω":
        for element in parser.parsing_give():
            markup_key.add(types.InlineKeyboardButton(element, callback_data=f'{element}_1'))
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å üëá', reply_markup=markup_key)


def treatment_give(call, text, markup_key):
    dict_values = []
    for element in parser.parsing_get():
        if element in dict_values or element == text[:-2]:
            continue
        else:
            dict_values.append(element)
            markup_key.add(types.InlineKeyboardButton(element, callback_data=f'{element}_2'))
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å üëá',
                     reply_markup=markup_key)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    markup_key = types.InlineKeyboardMarkup(row_width=2)
    try:
        if call.message:
            if '_1' in call.data:
                treatment_give(call, call.data, markup_key)
            elif '_2' in call.data:
                bot.send_message(call.message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ {call.data[:-2]}')
    except Exception as e:
        print(repr(e))


if __name__ == '__main__':
    bot.polling(none_stop=True)
