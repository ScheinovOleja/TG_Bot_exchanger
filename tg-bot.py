from config import *
from parser_el_change import GetCurrency
import telebot
from telebot import types

min_amount = 0
max_amount = 0
total_amount_text = ''
num_receive = ''

parser = GetCurrency()
markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
bot = telebot.TeleBot(token)
new_exchange = types.KeyboardButton("üîÅ –ù–æ–≤—ã–π –æ–±–º–µ–Ω")
exchange_history = types.KeyboardButton("‚åõ –ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤")
about_bot = types.KeyboardButton("‚ÑπÔ∏è–û –±–æ—Ç–µ")
support_key = types.KeyboardButton("üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
news = types.KeyboardButton("üì´ –ù–æ–≤–æ—Å—Ç–∏")
community = types.KeyboardButton("üë• –°–æ–æ–±—â–µ—Å—Ç–≤–æ")
support_button = types.InlineKeyboardButton("üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url='https://el-change.com/faq')
terms_of_use = types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", url='https://el-change.com/rules')
returns_policy = types.InlineKeyboardButton("–ü–æ–ª–∏—Ç–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤", url='https://el-change.com/rules')


@bot.message_handler(commands=['start'])
def welcome(message):
    markup.add(new_exchange, exchange_history, about_bot, support_key, news, community)
    bot.send_message(message.chat.id, 'üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º.', reply_markup=markup)
    bot.send_message(message.chat.id,
                     '–î–ª—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üîÅ –ù–æ–≤—ã–π –æ–±–º–µ–Ω, –æ–Ω–∞ –≤ –Ω–∏–∂–Ω–µ–º –º–µ–Ω—é üëá')


@bot.message_handler(content_types=['text'])
def message_one(message):
    markup_key = types.InlineKeyboardMarkup(row_width=2)
    if message.chat.type == 'private' and message.text == "‚ÑπÔ∏è–û –±–æ—Ç–µ":
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç!', parse_mode='HTML')
        markup_key.add(support_button, terms_of_use, returns_policy)
        bot.send_message(message.chat.id, '–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—É—Ç üëá', reply_markup=markup_key)
    if message.chat.type == 'private' and message.text == "üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        markup_key.add(support_button, terms_of_use, returns_policy)
        bot.send_message(message.chat.id, '–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—É—Ç üëá', reply_markup=markup_key)
    if message.chat.type == 'private' and message.text == "‚åõ –ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤":
        bot.send_message(message.chat.id, '‚ùóÔ∏è –¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –æ–±–º–µ–Ω–æ–≤ –ø—É—Å—Ç.')
    if message.chat.type == 'private' and message.text == "üîÅ –ù–æ–≤—ã–π –æ–±–º–µ–Ω":
        for element in parser.parsing_give():
            markup_key.add(types.InlineKeyboardButton(element, callback_data=f'{element}_1'))
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å üëá', reply_markup=markup_key)


def treatment_give(call, text, markup_key):
    global min_amount, max_amount, total_amount_text, num_receive
    dict_values = []
    give_currency = parser.parsing_give()
    num_receive = [num[1] for num in give_currency.items() if num[0] == text[:-2]]
    min_amount = float(num_receive[0][1][0])
    max_amount = float(num_receive[0][1][1])
    for element in parser.parsing_get(num_receive[0][0]):
        dict_values.append(element[0])
        markup_key.add(types.InlineKeyboardButton(element[0] + f' {element[1]} ' + f'({element[2]})',
                                                  callback_data=f'{element[0]}_2'))
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å üëá',
                     reply_markup=markup_key)


def determining_currency(text):
    global total_amount_text, num_receive
    for element in parser.parsing_get(num_receive[0][0]):
        if element[0] == text[:-2]:
            total_amount_text = element[1]


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    markup_key = types.InlineKeyboardMarkup(row_width=2)
    try:
        if call.message:
            if '_1' in call.data:
                treatment_give(call, call.data, markup_key)
            elif '_2' in call.data:
                determining_currency(call.data)
                bot.send_message(
                    call.message.chat.id,
                    f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å: (–ú–∏–Ω–∏–º—É–º:{min_amount}, –º–∞–∫—Å–∏–º—É–º:{max_amount})'
                )
                bot.register_next_step_handler(call.message, get_amount)
    except Exception as e:
        print(repr(e))


def calc_total_amount(custom_number):
    global total_amount_text
    var_1, var_2 = float(total_amount_text.split(':')[0]), float(total_amount_text.split(':')[1])
    total_amount = (var_2 / var_1) * custom_number
    return total_amount


def get_amount(message):
    try:
        if float(message.text) < min_amount or float(message.text) > max_amount:
            bot.send_message(message.chat.id, f'–î—É—Ä–∞–∫ —á—Ç–æ–ª—å? –°–∫–∞–∑–∞–ª –∂–µ, –ú–∏–Ω–∏–º—É–º:{min_amount}, –º–∞–∫—Å–∏–º—É–º:{max_amount}')
            bot.register_next_step_handler(message, get_amount)
        else:
            total_amount = calc_total_amount(float(message.text))
            bot.send_message(message.chat.id, f'–ó–∞ —Ç–∞–∫—É—é —Å—É–º–º—É —Ç—ã –ø–æ–ª—É—á–∏—à—å - {total_amount}')
    except Exception:
        bot.send_message(message.chat.id, f'–ê —Ç–µ–ø–µ—Ä—å —Ç–æ –∂–µ —Å–∞–º–æ–µ, —Ç–æ–∫ —Ü–∏—Ñ—Ä–∞–º–∏!')
        bot.register_next_step_handler(message, get_amount)


if __name__ == '__main__':
    bot.polling(none_stop=True)
